@if (MenuItems != null)
{
    <td>
        @foreach (NavMenuItem item in MenuItems)
        {
            @if (item.Type is NavLink)
            {
                <NavLink Text="@item.Text" IconURL="@item.Icon" LinkStyle="@item.LinkStyle" Width="@item.Width" Height="@item.Height" IconWidth="@item.IconWidth" IconHeight="@item.IconHeight" Index="@item.Index" CustomAction="@item.CustomLinkAction" OnClicked="@Clicked" />
            }
            else if (item.Type is NavTab)
            {
                <NavTab Text="@item.Text" IsSelected="@item.IsSelected" OnClicked="@Selected" />
            }
        }
        <div class="icx_ribbon_tabheader" style="float: left;" />
    </td>
}
else
{
    <td>&nbsp;</td>
}

@code {
    [Parameter] public List<NavMenuItem>? MenuItems { get; set; }
    [Parameter] public EventCallback<NavMenuItem> TabSelectionChanged { get; set; }
    [Parameter] public EventCallback<NavLink> LinkClicked { get; set; }

    private async void Selected(dynamic e)
    {
        if (e is NavTab xTab)
        {
            if (MenuItems == null)
            {
                return;
            }

            MenuItems.ForEach(item =>
            {
                if (item.IsSelected == true)
                {
                    item.IsSelected = false;
                }
            });

            NavMenuItem? x = MenuItems.Where(item => item.Text == xTab.Text).FirstOrDefault();

            if (x != null)
            {
                x.IsSelected = true;
            }

            await TabSelectionChanged.InvokeAsync(x);

            await InvokeAsync(StateHasChanged);
        }
    }

    private async void Clicked(dynamic e)
    {
        await LinkClicked.InvokeAsync(e);
    }
}
