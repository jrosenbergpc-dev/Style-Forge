<table class="icx_ribbon_control">
    <tr>
        <NavBar MenuItems="@MenuItems" TabSelectionChanged="@OnTabSelectionChanged" LinkClicked="@OnNavLinkClicked" />
    </tr>
    <tr>
        <Viewport @ref="@RibbonViewport" />
    </tr>
</table>
@code {
    private Viewport? RibbonViewport;

    [Parameter] public List<NavMenuItem>? MenuItems { get; set; }
    [Parameter] public EventCallback<NavMenuItem> TabSelected { get; set; }
    [Parameter] public EventCallback<NavLink> LinkClicked { get; set; }
    [Parameter] public EventCallback<dynamic> ItemClicked { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (MenuItems != null)
            {
                if (MenuItems.Count > 1)
                {
                    await UpdateViewport(MenuItems[1]); //load first tab section, might need to rework this....TODO
                }
            }
        }
    }

    private async void OnTabSelectionChanged(NavMenuItem e)
    {
        if (e.IsSelected == true)
        {
            await UpdateViewport(e);

            await TabSelected.InvokeAsync(e);
        }
    }

    private async Task UpdateViewport(NavMenuItem e)
    {
        if (RibbonViewport == null)
        {
            return;
        }

        Dictionary<string, object>? defaultAttributes = new Dictionary<string, object>
        {
            { "ItemClicked", new Func<dynamic, Task>(Viewport_ItemClicked)}
        };

        Dictionary<string, object>? mergedAttributes = defaultAttributes.MergeWith(e.CustomAttributes);

        await RibbonViewport.SetContent(this, e.Section, mergedAttributes);

        await InvokeAsync(StateHasChanged);
    }

    private async void OnNavLinkClicked(NavLink e)
    {
        await LinkClicked.InvokeAsync(e);
    }

    private async Task Viewport_ItemClicked(dynamic item)
    {
        await ItemClicked.InvokeAsync(item);
    }
}
